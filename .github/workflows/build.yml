name: vsc-extension

permissions:
  contents: write

concurrency:
  group: vsc-extension-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'targets/vsc-extension/**'
      - '.github/workflows/**'

jobs:
  testing:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      UV_PYTHON: "3.11"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run setup script (macOS)
        if: runner.os == 'macOS'
        run: |
          chmod +x targets/vsc-extension/scripts/setup-uvx-macos.sh
          targets/vsc-extension/scripts/setup-uvx-macos.sh

      - name: Run setup script (Linux)
        if: runner.os == 'Linux'
        run: |
          chmod +x targets/vsc-extension/scripts/setup-uvx-linux.sh
          targets/vsc-extension/scripts/setup-uvx-linux.sh

      - name: Run setup script (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          powershell -ExecutionPolicy Bypass -File targets/vsc-extension/scripts/setup-uvx-windows.ps1

      - name: Sync Python dependencies
        run: uv sync --frozen

      - name: Run E2E test on ${{ matrix.os }}
        run: uv run python src/tests/test_e2e_echo.py

  bump-version:
    needs: [testing]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Bump version
        id: bump
        working-directory: targets/vsc-extension
        run: |
          npm version patch --no-git-tag-version
          v=$(node -p "require('./package.json').version")
          echo "new_version=$v" >> $GITHUB_OUTPUT
          
          # Sync Python version files
          sed -i "s/__version__ = \".*\"/__version__ = \"$v\"/" ../../src/wrapper/__version__.py
          sed -i "s/version = \".*\"/version = \"$v\"/" ../../pyproject.toml
          
          echo "Bumped version to $v"

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            targets/vsc-extension/package.json
            targets/vsc-extension/package-lock.json
            src/wrapper/__version__.py
            pyproject.toml

  package-extension:
    needs: [bump-version]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ needs.bump-version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: targets/vsc-extension/package-lock.json

      - name: Install Node.js dependencies (for compile/package)
        working-directory: targets/vsc-extension
        run: npm ci

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      - name: Compile TypeScript and package extension
        working-directory: targets/vsc-extension
        run: |
          echo "Running TypeScript compilation..."
          npm run compile:vsc-extension
          echo "TypeScript compilation successful, starting packaging..."
          npm run package:vsc-extension
          echo "Packaging completed successfully"

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcpower-extension
          path: targets/vsc-extension/*.vsix

      - name: Commit version bump
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: targets/vsc-extension
        run: |
          v=$(node -p "require('./package.json').version")
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json ../../src/wrapper/__version__.py ../../pyproject.toml
          git commit -m "chore: bump version to $v [skip ci]"
          git pull --rebase origin main
          git push

  release:
    needs: package-extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: mcpower-extension
          path: release/

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.package-extension.outputs.new_version }}
          name: MCPower v${{ needs.package-extension.outputs.new_version }}
          generateReleaseNotes: true
          artifacts: "release/*.vsix"
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC trusted publishing
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        run: uv publish